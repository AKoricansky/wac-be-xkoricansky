/*
 * Waiting List Api
 *
 * Ambulance Counseling Project API
 *
 * API version: 1.0.0
 * Contact: xkoricansky@stuba.sk
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package ambulance_counseling_wl

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name		string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method		string
	// Pattern is the pattern of the URI.
	Pattern	 	string
	// HandlerFunc is the handler function of this route.
	HandlerFunc	gin.HandlerFunc
}

// NewRouter returns a new router.
func NewRouter(handleFunctions ApiHandleFunctions) *gin.Engine {
	return NewRouterWithGinEngine(gin.Default(), handleFunctions)
}

// NewRouter add routes to existing gin engine.
func NewRouterWithGinEngine(router *gin.Engine, handleFunctions ApiHandleFunctions) *gin.Engine {
	for _, route := range getRoutes(handleFunctions) {
		if route.HandlerFunc == nil {
			route.HandlerFunc = DefaultHandleFunc
		}
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Default handler for not yet implemented routes
func DefaultHandleFunc(c *gin.Context) {
	c.String(http.StatusNotImplemented, "501 not implemented")
}

type ApiHandleFunctions struct {

	// Routes for the AmbulanceCounselingAPI part of the API
	AmbulanceCounselingAPI AmbulanceCounselingAPI
	// Routes for the AmbulanceCounselingAuthAPI part of the API
	AmbulanceCounselingAuthAPI AmbulanceCounselingAuthAPI
}

func getRoutes(handleFunctions ApiHandleFunctions) []Route {
	return []Route{ 
		{
			"CreateQuestion",
			http.MethodPost,
			"/ak-ambulance-counseling-api/questions/new",
			handleFunctions.AmbulanceCounselingAPI.CreateQuestion,
		},
		{
			"DeleteQuestionById",
			http.MethodDelete,
			"/ak-ambulance-counseling-api/delete/question/:id",
			handleFunctions.AmbulanceCounselingAPI.DeleteQuestionById,
		},
		{
			"DeleteReplyById",
			http.MethodDelete,
			"/ak-ambulance-counseling-api/delete/reply/:id",
			handleFunctions.AmbulanceCounselingAPI.DeleteReplyById,
		},
		{
			"GetQuestionById",
			http.MethodGet,
			"/ak-ambulance-counseling-api/questions/:id",
			handleFunctions.AmbulanceCounselingAPI.GetQuestionById,
		},
		{
			"GetQuestions",
			http.MethodGet,
			"/ak-ambulance-counseling-api/questions",
			handleFunctions.AmbulanceCounselingAPI.GetQuestions,
		},
		{
			"GetRepliesByQuestionId",
			http.MethodGet,
			"/ak-ambulance-counseling-api/questions/:id/replies",
			handleFunctions.AmbulanceCounselingAPI.GetRepliesByQuestionId,
		},
		{
			"GetReplyById",
			http.MethodGet,
			"/ak-ambulance-counseling-api/questions/:id/reply/:replyId",
			handleFunctions.AmbulanceCounselingAPI.GetReplyById,
		},
		{
			"ReplyToQuestion",
			http.MethodPost,
			"/ak-ambulance-counseling-api/questions/:id/reply",
			handleFunctions.AmbulanceCounselingAPI.ReplyToQuestion,
		},
		{
			"UpdateQuestionById",
			http.MethodPut,
			"/ak-ambulance-counseling-api/update/question/:id",
			handleFunctions.AmbulanceCounselingAPI.UpdateQuestionById,
		},
		{
			"UpdateReplyById",
			http.MethodPut,
			"/ak-ambulance-counseling-api/update/reply/:id",
			handleFunctions.AmbulanceCounselingAPI.UpdateReplyById,
		},
		{
			"UserLogin",
			http.MethodPost,
			"/ak-ambulance-counseling-api/login",
			handleFunctions.AmbulanceCounselingAuthAPI.UserLogin,
		},
		{
			"UserRegister",
			http.MethodPost,
			"/ak-ambulance-counseling-api/register",
			handleFunctions.AmbulanceCounselingAuthAPI.UserRegister,
		},
	}
}
